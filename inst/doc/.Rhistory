mymats
vapply(mymats, FUN = function(i) as.vector(mymats[[i]]),
FUN.VALUE = vector(mode = "numeric", length = 5 ))
vapply(mymats, FUN = function(x) as.vector(x),
FUN.VALUE = vector(mode = "numeric", length = 5 ))
mat1 <- cbind(1:5, 6:10)
mat2 <- cbind(11:15, 16:20)
mymats <- list(mat1, mat2)
mymats
vapply(mymats, FUN = function(x) as.vector(x),
FUN.VALUE = vector(mode = "numeric", length = 5 ))
vapply(mymats, FUN = function(x) as.vector(x),
FUN.VALUE = vector(mode = "numeric", length = 2*5 ))
sapply(mymats, FUN = function(x) as.vector(x))
?hclust
library(cqn)
?pickrell
?pickrel
sample(1:531, 1)
rustall <- read.csv("/home/dreambig/Dropbox/michelmore-research/weekly-updates/july15-normalization-figures/all-rust-cqn-pn-july17.csv", header = TRUE, sep = "\t")
getwd()
rustall <- read.csv("/Users/dreambig/Dropbox/michelmore-research/weekly-updates/july15-normalization-figures/all-rust-cqn-pn-july17.csv", header = TRUE, sep = "\t")
names(rustall) <- sub("X", "", names(rustall))
#exclude 22NS from time series
rustall <- rustall[,-c(22,23,24,25)]
head(rustall)
dim(rustall)
tpts <- c(0, 5, 8, 15, 22)
digits<-c(c(1:5),letters,toupper(letters))
digits.w0 <- c(0, digits)
source("/Users/dreambig/Dropbox/michelmore-research/analysis-rnaseq/digiture/step_digit_coding/digit_coding.R")
reps.pat <- paste("dpi.", 1:4, sep = "")
rustall.reps <- lapply(1:4,
FUN = function(i) {
y <- rustall[,grep(reps.pat[i], x = names(rustall))]
names(y) <- paste(tpts, "dpi", sep = "")
y})
rustall.long <- do.call(rbind, rustall.reps)
head(rustall.long)
data<-rustall.long
rustall.long <- do.call(rbind, rustall.reps)
head(rustall.long)
data<-rustall.long
head(data)
data.base<-list()
data.base.digit<-list()
table.base<-list()
p.base<-list()
entropy.base<-c()
length(data.base)<-length(digits)-1
length(data.base.digit)<-length(digits)-1
length(table.base)<-length(digits)-1
length(p.base)<-length(digits)-1
length(entropy.base)<-length(digits)-1
k = 1
data.base[[k]]<-data
debug(LetterTransform)
for(i in 1:5){
data.base[[k]][,i]<-LetterTransform((k+1),data[,i])
}
debug(RankTransform)
n
n
ls()
head(vector)
n
n
ls()
q
n
q
n
ls9)
ls()
rank.vector
q[1]
q[2]
n
n
ls()
head(rank.vector)
n
head(rank.vector)
max(rank.vector)
n
k
head(as.numeric(vector>q[k])*k)
rank.vector
n
n
ls()
k
10:2
?replace
t
n
t
digits[t]
digits[10:2]
digits
n
n
c
head(transformed.vector)
transformed.vector
n
n
n
n
c
undebug(LetterTransform)
undebug(RankTransform)
n
n
n
c
c
data.base[[k]][,1]
data.base[[k]][,2]
data.base[[k]][,3]
data.base[[k]][,4]
data.base[[k]][,5]
data.base.digit[[k]]<-rep('null',nrow(data))
debug(PasteDigits)
data.base.digit[[k]]<-rep('null',nrow(data))
j = 1
data.base[[k]][j,]
PasteDigits(data.base[[k]][j,])
n
ls()
vv
n
ls()
digit
n
n
c
digit
n
n
data.base.digit[[k]][j]<-PasteDigits(data.base[[k]][j,])
c
undebug(PasteDigits)
for(j in 1:nrow(data)){
data.base.digit[[k]][j]<-PasteDigits(data.base[[k]][j,])
}
data.base.digit
table(data.base.digit[[k]][1:5])
table(data.base.digit[[k]])
table.base[[k]][,2]
table.base[[k]]
table.base[[k]]<-as.data.frame(table(data.base.digit[[k]]))
table.base[[k]][,2]
table.base[[k]][,1]
nrow(data)
p.base[[k]]<-table.base[[k]][,2]/(nrow(data))
p.base[[k]]
entropy.base[k]<-sum(-p.base[[k]]*log(p.base[[k]]))
print(paste("Amen",k, sep=""))
table.base.wt<-table.base
p.base.wt<-p.base
entropy.base.wt<-entropy.base
wt.base<-data.base
wt.base.digit <- data.base.digit
?as.factor
as.character(data.base[[k]][j,])
table.base[[k]]
p.base[[k]]
plot(p.base)
plot(1:32, p.base)
plot(1:length(p.base[[k]]), p.base[[k]])
x <- sample.int(10,4)
x
?sub
sub(" ", "", x)
sub(" ", "", as.character(x)
)
paste(x,"")
paste(x," ")
data.base[[k]][,i]
data.base[[k]][j,]
data.base[[k]][,i]<-LetterTransform((k+1),data[,i])
data.base.digit[[k]]<-rep('null',nrow(data))
data.base[[k]][j,]
data.base[[k]][,i]
data.base[[k]][j,]
data.base[[k]][j,]
data.base.digit[[k]][j]<-PasteDigits(data.base[[k]][j,])
data.base.digit[[k]][j]
for(j in 1:nrow(data)){
data.base.digit[[k]][j]<-PasteDigits(data.base[[k]][j,])
}
data.base.digit[[k]]
x <- rep(0,times = 1e6)
system.time(x == 1)
system.time(x == 1)
system.time(x == 1)
system.time(x == 1)
x <- rep(0,times = 1e6)
system.time(x == 1)
system.time(length(which(x == 1)))
system.time(x == 1)
system.time(length(which(x == 1)))
library(microbenchmark)
microbenchmark()
microbenchmark(A = x == 1,B = length(which(x == 1)) )
?save
?ls
ls(all =TRUE)
?save
temps <- c(1/10,1/3,1/2,1, 2)
rtemps <- rev(temps)
rtemps
c(1/2, 1, 2, 3, 10)
1/c(1/2, 1, 2, 3, 10)
0.5^(1/2)
0.25^(1/2)
1/c(1/2, 1, 2, 3, 10)
rtemps
temps <- 1/c(1,2,3,4,5,6,7, 10,20,50,75,100,125,150,200,300,500,750,1000)
temps
temps <- 1/c(2,1,2,3,4,5,6,7, 10,20,50,75,100,125,150,200,300,500,750,1000)
temps
temps <- 1/c(1/2,1,2,3,4,5,6,7, 10,20,50,75,100,125,150,200,300,500,750,1000)
temps
0.5^(1/temps[20])
0.5^(1/temps[1])
0.9^(1/temps[20])
0.9^(1/temps[1])
0.9^(1/temps[2])
0.9^(1/temps[3])
0.9^(1/temps[1])
temps
rev(seq(from =0.001, to = 10, length = 20)
rev(seq(from =0.001, to = 10, length = 20))
0.8^(1/10)
0.8^(1/8)
0.8^(1/5)
0.8^(1/0.52)
exp(-1/5)
exp(-1/0.1)
exp(-1/0.52)
exp(-1/10)
exp(-1/100)
exp(-1/0.1)
exp(-0.1/0.1)
rev(seq(from =0.001, to = 10, length = 20))
rev(seq(from =0.001, to = 1, length = 10))
c(rev(seq(from = 2, = to = 12, length = 10))rev(seq(from =0.001, to = 1, length = 10))
c(rev(seq(from = 2, = to = 12, length = 10))rev(seq(from =0.001, to = 1, length = 10)))
c(rev(seq(from = 2, = to = 12, length = 10)), rev(seq(from =0.001, to = 1, length = 10)))
c(rev(seq(from = 2,to = 12, length = 10)), rev(seq(from = 0.001, to = 1, length = 10)))
temps <- c(rev(seq(from = 2,to = 12, length = 10)), rev(seq(from = 0.001, to = 1, length = 10)))
temps
temps <- c(rev(seq(from = 2,to = 14, length = 10)), rev(seq(from = 0.001, to = 1, length = 10)))
temps
temps <- c(rev(seq(from = 2,to = 11, length = 10)), rev(seq(from = 0.001, to = 1, length = 10)))
temps
seq_len(10)
library(Rcpp)
sourceCpp("~/Dropbox/play-r//play-Rcpp/examples/example-initVec.cpp")
?sample
.Machine$double.eps
.Machine$double.eps * 1000
c(0.1, 0.7, 0.2) %*% c(0.5, 0.1, 0.4)
0.7 *0.7
c(0.1, 0.7, 0.2) %*% c(0.5, 0.1, 0.4) * 100
c(0.1, 0.7, 0.2) %*% c(0.5, 0.1, 0.4) * 1000
c(0.1, 0.7, 0.2) %*% c(0.5, 0.1, 0.4) * 10000
load("~/Desktop/rust_prob_conect_pt2.rda")
5*128/ 60
source("http://bioconductor.org/biocLite.R")
biocLite("sva")### R code from vignette source 'vignettes/sva/inst/doc/sva.Rnw'
library(bladderbatch)
source("http://bioconductor.org/biocLite.R")
biocLite("bladderbatch")
library(limma)
library(sva)
library(bladderbatch)
data(bladderdata)
library(limma)
library(pamr)
install.packages("pamr")
library(pamr)
pheno = pData(bladderEset)
head(pheno)
edata = exprs(bladderEset)
View(edata)
hist(pheno$sample)
pheno = pData(bladderEset)
edata = exprs(bladderEset)
pheno$cancer
mod = model.matrix(~as.factor(cancer), data=pheno)
View(mod)
mod0 = model.matrix(~1,data=pheno)
batch = pheno$batch
fix(batch)
mod = model.matrix(~as.factor(cancer), data=pheno)
combat_edata = ComBat(dat=edata, batch=batch, mod=mod, numCovs=NULL, par.prior=TRUE, prior.plots=FALSE)
pValuesComBat = f.pvalue(combat_edata,mod,mod0)
qValuesComBat = p.adjust(pValuesComBat,method="BH")
View(edata)
source("http://bioconductor.org/biocLite.R")
biocLite("sva")### R code from vignette source 'vignettes/sva/inst/doc/sva.Rnw'
###################################################
### code chunk number 1: sva.Rnw:5-6
###################################################
options(width=65)
###################################################
### code chunk number 2: input
###################################################
library(sva)
library(bladderbatch)
data(bladderdata)
library(pamr)
library(limma)
###################################################
### code chunk number 3: input
###################################################
pheno = pData(bladderEset)
###################################################
### code chunk number 4: input
###################################################
edata = exprs(bladderEset)
###################################################
### code chunk number 5: input
###################################################
mod = model.matrix(~as.factor(cancer), data=pheno)
###################################################
### code chunk number 6: input
###################################################
mod0 = model.matrix(~1,data=pheno)
###################################################
### code chunk number 7: input
###################################################
n.sv = num.sv(edata,mod,method="leek")
n.sv
svobj = sva(edata,mod,mod0,n.sv=n.sv)
?ComBat
combat_edata = ComBat(dat=edata, batch=batch, mod=mod, numCovs=NULL, par.prior=TRUE, prior.plots=TRUE)
x <- matrix(c(1,2,3,4),2,2)
df <- data.frame(id = c("1", "2"), x = x)
df
as.data.frame(x)
id = c("1", "2")
df <- data.frame(id, x = x)
df
colnames <- c("col1", "col2")
colnames(x) <- c("col1", "col2")
id = c("1", "2")
df <- data.frame(id, x = x)
df
df <- data.frame(id,  x)
df
x <- matrix(c(1,2,3,4,5,6,7,8,9),3,3)
colnames(x) <- c("col1", "col2", "col3")
as.data.frame(x)
id = c("i1", "i2", "i3")
subx <- x[,2:3]
df <- data.frame(id,  subx)
df
subx <- x[,-c("col3")]
subx <- x[,-"col3"]
x[,"col3"]
subx <- x[,2:3]
subx <- x[,-c(2:3)]
df <- data.frame(id,  subx)
df
wd <- "/Users/dreambig/Dropbox/michelmore-research/analysis-rnaseq/digiswell"
if(getwd() != wd) {
setwd(wd)
}
library(devtools)
load_all()
rm(list = ls())
REPNUM <- 4 #four replicates
TPT <- 9 #five time points
N <- 15141
geneRator <- function(i, nbn, tpt) {
nbsize <- sample(seq_len(500), tpt)
nbprob <- runif(tpt)
res <- vapply(seq.int(nbsize),
FUN = function(i)
rnbinom(n=nbn, size = nbsize[i], prob = nbprob[i]),
FUN.VALUE = vector(mode = "numeric", length = nbn))
rownames(res) <- rep(paste("feature", i, sep = ""), nbn)
colnames(res) <- paste(seq.int(tpt), "tpt", sep = "")
res
}
#speed for higher time counts
featCounts <- do.call(rbind,lapply(1:N, function(i) geneRator(i,REPNUM,TPT)))
featIdxList <- makeFeatIdxList(N, REPNUM)
featCounts <- lapply(featIdxList, function(i) featCounts[i,])
head(featCounts)
featCounts <- do.call(rbind,lapply(1:N, function(i) geneRator(i,REPNUM,TPT)))
#speed for higher time counts
featCounts <- do.call(rbind,lapply(1:N, function(i) geneRator(i,REPNUM,TPT)))
featIdxList <- makeFeatIdxList(N, REPNUM)
featCounts <- do.call(rbind,lapply(1:N, function(i) geneRator(i,REPNUM,TPT)))
featIdxList <- makeFeatIdxList(N, REPNUM)
featCountsList <- lapply(featIdxList, function(i) featCounts[i,])
head(featCounts)
system.time(lapply(featCountsList, function(x) wrapMakeRcppTableC(x)))
wd <- "/Users/dreambig/Dropbox/michelmore-research/analysis-rnaseq/digiswell"
if(getwd() != wd) {
setwd(wd)
}
library(devtools)
load_all()
rm(list = ls())
#set up data structure
#generate data
REPNUM <- 4 #four replicates
TPT <- 9 #five time points
N <- 15141
geneRator <- function(i, nbn, tpt) {
nbsize <- sample(seq_len(500), tpt)
nbprob <- runif(tpt)
res <- vapply(seq.int(nbsize),
FUN = function(i)
rnbinom(n=nbn, size = nbsize[i], prob = nbprob[i]),
FUN.VALUE = vector(mode = "numeric", length = nbn))
rownames(res) <- rep(paste("feature", i, sep = ""), nbn)
colnames(res) <- paste(seq.int(tpt), "tpt", sep = "")
res
}
#speed for higher time counts
featCounts <- do.call(rbind,lapply(1:N, function(i) geneRator(i,REPNUM,TPT)))
head(featCounts)
featIdxList <- makeFeatIdxList(N, REPNUM)
featCountsList <- lapply(featIdxList, function(i) featCounts[i,])
system.time(lapply(featCountsList, function(x) wrapMakeRcppTableC(x)))
#first check
minCount <- 1; minRep <- 4; minTpt <- 1;
result1 <- checkFeats(featIdxList, featCounts,
minCount, minRep, minTpt)
featCounts[featIdxList[[1]],]
result1[1]
#speed for higher time counts
featCounts <- do.call(rbind,lapply(1:N, function(i) geneRator(i,REPNUM,TPT)))
head(featCounts)
featIdxList <- makeFeatIdxList(N, REPNUM)
featCountsList <- lapply(featIdxList, function(i) featCounts[i,])
wrapMakeRcppTableC <- function(gmat) {
ens <- sapply(seq_len(dim(gmat)[2]), FUN = function(i) gmat[mix[,i], i])
makeRcppTableC(ens)
}
system.time(lapply(featCountsList, function(x) wrapMakeRcppTableC(x)))
TPT <- 5
REPNUM <- 4
N <- dim(raw.gmat[[2]])[1]/REPNUM
mix <- index.ens(REPNUM,TPT)
system.time(lapply(featCountsList, function(x) wrapMakeRcppTableC(x)))
minCount <- 1; minRep <- 4; minTpt <- 1;
result1 <- checkFeats(featIdxList, featCounts,
minCount, minRep, minTpt)
featCounts[featIdxList[[1]],]
result1[1]
minCount <- 200; minRep <- 4; minTpt <- 1;
result1 <- checkFeats(featIdxList, featCounts,
minCount, minRep, minTpt)
featCounts[featIdxList[[1]],]
result1[1]
featCounts[featIdxList[[1]],]
minCount <- 300; minRep <- 4; minTpt <- 1;
result1 <- checkFeats(featIdxList, featCounts,
minCount, minRep, minTpt)
featCounts[featIdxList[[1]],]
result1[1]
minCount <- 3000; minRep <- 4; minTpt <- 1;
result1 <- checkFeats(featIdxList, featCounts,
minCount, minRep, minTpt)
featCounts[featIdxList[[1]],]
result1[1]
#determine the filtering criteria
minCount <- 2410; minRep <- 3; minTpt <- 1;
result1 <- checkFeats(featIdxList, featCounts,
minCount, minRep, minTpt)
featCounts[featIdxList[[1]],]
result1[1]
minCount <- 2610; minRep <- 3; minTpt <- 1;
result1 <- checkFeats(featIdxList, featCounts,
minCount, minRep, minTpt)
featCounts[featIdxList[[1]],]
result1[1]
featCounts[featIdxList[[2]],]
minCount <- 2610; minRep <- 3; minTpt <- 2;
result1 <- checkFeats(featIdxList, featCounts,
minCount, minRep, minTpt)
featCounts[featIdxList[[2]],]
result1[2]
minCount <- 1630; minRep <- 3; minTpt <- 2;
result1 <- checkFeats(featIdxList, featCounts,
minCount, minRep, minTpt)
featCounts[featIdxList[[2]],]
result1[2]
minCount <- 1630; minRep <- 3; minTpt <- 1;
result1 <- checkFeats(featIdxList, featCounts,
minCount, minRep, minTpt)
featCounts[featIdxList[[2]],]
result1[2]
\begin{document}
UC Davis as well as the Richard Michelmore Lab in filtering RNAseq time course experiments; it was motivated by the edgeR User manual and extended to time course data with multiple experimental conditions. At present, the author requires that the tutorial and accompaning R script to not be distributed outside the Michelmore-Dubcovsky labs, although it may be improved by members of either. The accompanying software is still in experimental stages and do not be surprised if any bugs are found.
library(knitr)
knit("inst/doc/filter-rnaseq-timecourse-simulation.Rnw")
setwd("inst/doc")
knit("inst/doc/filter-rnaseq-timecourse-simulation.Rnw")
library(knitr)
knit("inst/doc/filter-rnaseq-timecourse-simulation.Rnw")
getwd()
list.files()
knit("filter-rnaseq-timecourse-simulation.Rnw")
